{"version":3,"sources":["config.js","everyDay/index.js","weatherHeader/index.js","search/index.js","App.js","reportWebVitals.js","index.js"],"names":["API","EveryDay","handleFetch","city","state","fetch","then","resp","console","log","json","data","setState","weatherResult","main","icon","weather","wind","handleOnChange","e","target","value","name","handleCity","preventDefault","this","className","type","placeholder","onChange","onClick","temp","src","alt","pressure","feels_like","speed","React","Component","WeatherHeader","handleClick","isClicked","list","slice","map","result","index","dt_txt","Math","ceil","App","props","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26fa4ea6.chunk.js","sourcesContent":["export const API='7fa9c7f8bc04cdbcac5433207a81f3e8'\r\n","import React from 'react'\r\nimport './index.css'\r\nimport {API} from '../config'\r\n\r\n\r\nclass EveryDay extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            weatherResult:[],\r\n            icon:'',\r\n            wind:'',\r\n            city:'London'\r\n        }\r\n\r\n    }\r\n    handleFetch=()=>{\r\n        const {city}=this.state\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API}&units=metric`)\r\n       \r\n         .then((resp) => {\r\n        console.log(resp);\r\n            return resp.json()\r\n         })\r\n        .then((data) => {\r\n            console.log(data);\r\n            this.setState({\r\n                weatherResult: data.main,\r\n                icon:data.weather[0].icon,\r\n                wind:data.wind\r\n               // loading: false,\r\n              })\r\n            \r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.handleFetch()\r\n    }\r\n    \r\n    handleOnChange=(e)=>{\r\n        const {name,value}=e.target\r\n       this.setState({\r\n           city:value\r\n       })\r\n    console.log(value);\r\n    }\r\n    handleCity=(e)=>{\r\n       \r\n        e.preventDefault();\r\n       \r\n        this.handleFetch()\r\n         \r\n    }\r\n    render() {\r\n        const {weatherResult ,icon ,wind}=this.state\r\n        return (\r\n            <div className='dayWeather'>\r\n               \r\n            <input type='text' placeholder='Choose the city' name='city' onChange={this.handleOnChange} />\r\n             {/* ref={this.textInput} */}\r\n         <input type='button' value='Search' name='sumbit' onClick={this.handleCity} /> \r\n            {/* onClick={this.focusTextInput} */}\r\n            \r\n          \r\n                <div className='cityDiv'>\r\n                        Weather in Yerevan\r\n                        \r\n                    </div >\r\n                    <div className=\"mainDayWeather\">\r\n                        <div className='weatherLeftDiv'>\r\n                      <span>Temp:{weatherResult.temp} &deg;C</span> \r\n                       <span>\r\n                              <img src={`http://openweathermap.org/img/wn/${icon}.png`} alt=''/>\r\n                         </span>\r\n                         </div>\r\n                         <div className='weatherRightDiv'>\r\n                           <div>Pressure:{weatherResult.pressure}</div> \r\n                           <div>Feels like: {weatherResult.feels_like}</div> \r\n                           <div>Wind speed:{wind.speed}</div>\r\n                         </div>\r\n                      </div>\r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default EveryDay","import React from 'react'\r\nimport './index.css'\r\nimport {API} from '../config'\r\n\r\nclass WeatherHeader extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            weatherResult:[],\r\n            isClicked:false,\r\n            city:'Yerevan',\r\n         }\r\n    }\r\n    componentDidMount(){\r\n        const {city}=this.state\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API}&units=metric`)\r\n         .then((resp) => {\r\n        console.log(resp);\r\n            return resp.json()\r\n         })\r\n        .then((data) => {\r\n            console.log(data.list);\r\n            this.setState({\r\n                weatherResult: data.list,\r\n               // loading: false,\r\n              })\r\n            \r\n        })\r\n        \r\n    }\r\n    handleClick=()=>{\r\n        this.setState({\r\n            isClicked :!this.state.isClicked\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        const {weatherResult,isClicked}=this.state\r\n      ///  http://openweathermap.org/img/wn/{result.weather[0].icon}@2x.png\r\n       \r\n        return (\r\n            <div className='forecastDiv'>\r\n                 \r\n                <div>Forecast for a day</div>\r\n              <div className='fiveDaysForecast'>{weatherResult.slice(0,8).map((result,index)=>{\r\n        return <span key={index} className='tempSpan'>\r\n         \r\n          <span>{result.dt_txt.slice(6,10)}</span>\r\n          <span>{result.dt_txt.slice(10,13)}</span>\r\n         \r\n          <span> <img src={`http://openweathermap.org/img/wn/${result.weather[0].icon}.png` }alt=''/></span>\r\n          <span>{Math.ceil(result.main.temp)}&deg;C</span>\r\n           </span> })}\r\n                  </div>    \r\n\r\n                  <div onClick={this.handleClick}>Forecast for 5 days</div>{isClicked &&\r\n                <div className='fiveDaysForecast' >\r\n                {weatherResult.map((result,index)=>{\r\n        return <span key={index} className='tempSpan'>\r\n          {/* <span className='tempSpan'>{Math.ceil(result.main.temp_min)} {Math.ceil(result.main.temp_max)}   </span>   */}\r\n          <span>{result.dt_txt.slice(6,10)}</span>\r\n          <span>{result.dt_txt.slice(10,13)}</span>\r\n         \r\n          <span> <img src={`http://openweathermap.org/img/wn/${result.weather[0].icon}.png` }alt=''/></span>\r\n          <span>{Math.ceil(result.main.temp)}&deg;C</span>\r\n           </span> })}\r\n                </div>}\r\n    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherHeader","import React from 'react'\r\nimport './index.css'\r\nimport {API} from '../config'\r\n\r\nclass Search extends React.Component{\r\n    constructor(){\r\n        super()\r\n       // this.textInput = React.createRef();\r\n        this.state={\r\n            city:'Yerevan'\r\n         }\r\n    }\r\n    // focusTextInput=()=> {\r\n    //     // Установим фокус на текстовое поле с помощью чистого DOM API\r\n    //     // Примечание: обращаемся к \"current\", чтобы получить DOM-узел\r\n    //     this.textInput.current.focus();\r\n    //   }\r\n\r\n      handleFetch(){\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.city}&appid=${API}&units=metric`)\r\n        .then((resp) => {\r\n       console.log(resp);\r\n           return resp.json()\r\n        })\r\n       .then((data) => {\r\n           console.log(data.list);\r\n           this.setState({\r\n               weatherResult: data.list,\r\n               \r\n              // loading: false,\r\n             })\r\n           \r\n       })\r\n       \r\n      }\r\n    componentDidMount(){\r\n      this.handleFetch()\r\n        \r\n    }\r\n    \r\n    componentDidUpdate(x,prevState){\r\n        if(this.state.city!==prevState.city){\r\n            this.handleFetch()\r\n        }\r\n    }\r\n    addCity=(e)=>{\r\n        e.preventDefault();\r\n        this.setState({\r\n            city:e.target.value\r\n         })\r\n         console.log(this.state.city);\r\n    }\r\n    handleOnChange=(e)=>{\r\n        const {name,value}=e.target\r\n       \r\n    console.log(value);\r\n    }\r\n    render(){\r\n      return (  <div>\r\n          <form onSubmit={this.addCity}>\r\n            <input type='text' placeholder='Choose the city' name='city' onChange={this.handleOnChange}/>\r\n             {/* ref={this.textInput} */}\r\n            <input type='button' value='Search' name='sumbit' />\r\n            {/* onClick={this.focusTextInput} */}\r\n            </form>\r\n            \r\n        </div>\r\n      )\r\n    }\r\n}\r\nexport default Search","//import './App.css';\nimport EveryDay from './everyDay';\nimport Search from './search';\nimport WeatherHeader from './weatherHeader';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Weathera\n             </header>\n        {/* <Search city={props.city}/> */}\n             <EveryDay/>\n     <WeatherHeader/>\n            \n            \n             </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}